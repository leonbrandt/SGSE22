/* 
 * EzOrder Backend
 *
 * API Description for EzOrder Rest-Backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PositionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PositionApiTests
    {
        private PositionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PositionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PositionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PositionApi
            //Assert.IsInstanceOfType(typeof(PositionApi), instance, "instance is a PositionApi");
        }

        
        /// <summary>
        /// Test DeletePosition
        /// </summary>
        [Test]
        public void DeletePositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? positionID = null;
            //instance.DeletePosition(positionID);
            
        }
        
        /// <summary>
        /// Test GetPositionById
        /// </summary>
        [Test]
        public void GetPositionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? positionID = null;
            //var response = instance.GetPositionById(positionID);
            //Assert.IsInstanceOf<Position> (response, "response is Position");
        }
        
        /// <summary>
        /// Test GetPositions
        /// </summary>
        [Test]
        public void GetPositionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPositions();
            //Assert.IsInstanceOf<List<Position>> (response, "response is List<Position>");
        }
        
        /// <summary>
        /// Test PlacePosition
        /// </summary>
        [Test]
        public void PlacePositionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Position body = null;
            //var response = instance.PlacePosition(body);
            //Assert.IsInstanceOf<Position> (response, "response is Position");
        }
        
        /// <summary>
        /// Test UpdatePositionWithForm
        /// </summary>
        [Test]
        public void UpdatePositionWithFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? positionID = null;
            //string name = null;
            //string status = null;
            //instance.UpdatePositionWithForm(positionID, name, status);
            
        }
        
    }

}
