/* 
 * EzOrder Backend
 *
 * API Description for EzOrder Rest-Backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
    public partial class Product :  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="productID">productID (required).</param>
        /// <param name="name">name.</param>
        /// <param name="maxAmount">maxAmount.</param>
        /// <param name="packDescription">packDescription.</param>
        /// <param name="categoryCatID">categoryCatID.</param>
        /// <param name="imgURL">imgURL.</param>
        public Product(long? productID = default(long?), string name = default(string), long? maxAmount = default(long?), string packDescription = default(string), long? categoryCatID = default(long?), string imgURL = default(string))
        {
            // to ensure "productID" is required (not null)
            if (productID == null)
            {
                throw new InvalidDataException("productID is a required property for Product and cannot be null");
            }
            else
            {
                this.ProductID = productID;
            }
            this.Name = name;
            this.MaxAmount = maxAmount;
            this.PackDescription = packDescription;
            this.CategoryCatID = categoryCatID;
            this.ImgURL = imgURL;
        }
        
        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="productID", EmitDefaultValue=false)]
        public long? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MaxAmount
        /// </summary>
        [DataMember(Name="maxAmount", EmitDefaultValue=false)]
        public long? MaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets PackDescription
        /// </summary>
        [DataMember(Name="packDescription", EmitDefaultValue=false)]
        public string PackDescription { get; set; }

        /// <summary>
        /// Gets or Sets CategoryCatID
        /// </summary>
        [DataMember(Name="category_catID", EmitDefaultValue=false)]
        public long? CategoryCatID { get; set; }

        /// <summary>
        /// Gets or Sets ImgURL
        /// </summary>
        [DataMember(Name="imgURL", EmitDefaultValue=false)]
        public string ImgURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  PackDescription: ").Append(PackDescription).Append("\n");
            sb.Append("  CategoryCatID: ").Append(CategoryCatID).Append("\n");
            sb.Append("  ImgURL: ").Append(ImgURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MaxAmount == input.MaxAmount ||
                    (this.MaxAmount != null &&
                    this.MaxAmount.Equals(input.MaxAmount))
                ) && 
                (
                    this.PackDescription == input.PackDescription ||
                    (this.PackDescription != null &&
                    this.PackDescription.Equals(input.PackDescription))
                ) && 
                (
                    this.CategoryCatID == input.CategoryCatID ||
                    (this.CategoryCatID != null &&
                    this.CategoryCatID.Equals(input.CategoryCatID))
                ) && 
                (
                    this.ImgURL == input.ImgURL ||
                    (this.ImgURL != null &&
                    this.ImgURL.Equals(input.ImgURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MaxAmount != null)
                    hashCode = hashCode * 59 + this.MaxAmount.GetHashCode();
                if (this.PackDescription != null)
                    hashCode = hashCode * 59 + this.PackDescription.GetHashCode();
                if (this.CategoryCatID != null)
                    hashCode = hashCode * 59 + this.CategoryCatID.GetHashCode();
                if (this.ImgURL != null)
                    hashCode = hashCode * 59 + this.ImgURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
