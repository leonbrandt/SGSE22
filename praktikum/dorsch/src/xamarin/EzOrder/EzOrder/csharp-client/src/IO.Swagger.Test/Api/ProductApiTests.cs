/* 
 * EzOrder Backend
 *
 * API Description for EzOrder Rest-Backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ProductApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProductApiTests
    {
        private ProductApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProductApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProductApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProductApi
            //Assert.IsInstanceOfType(typeof(ProductApi), instance, "instance is a ProductApi");
        }

        
        /// <summary>
        /// Test Add
        /// </summary>
        [Test]
        public void AddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Product body = null;
            //instance.Add(body);
            
        }
        
        /// <summary>
        /// Test DeleteProduct
        /// </summary>
        [Test]
        public void DeleteProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productID = null;
            //instance.DeleteProduct(productID);
            
        }
        
        /// <summary>
        /// Test GetProductById
        /// </summary>
        [Test]
        public void GetProductByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productID = null;
            //var response = instance.GetProductById(productID);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test GetProducts
        /// </summary>
        [Test]
        public void GetProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetProducts();
            //Assert.IsInstanceOf<List<Product>> (response, "response is List<Product>");
        }
        
        /// <summary>
        /// Test UpdateProduct
        /// </summary>
        [Test]
        public void UpdateProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Product body = null;
            //instance.UpdateProduct(body);
            
        }
        
        /// <summary>
        /// Test UpdateProductWithForm
        /// </summary>
        [Test]
        public void UpdateProductWithFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? productID = null;
            //string name = null;
            //string status = null;
            //instance.UpdateProductWithForm(productID, name, status);
            
        }
        
    }

}
