/* 
 * EzOrder Backend
 *
 * API Description for EzOrder Rest-Backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Category
    /// </summary>
    [DataContract]
    public partial class Category :  IEquatable<Category>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="catID">catID.</param>
        /// <param name="name">name.</param>
        /// <param name="isBookAble">isBookAble.</param>
        /// <param name="bookableChkText">bookableChkText.</param>
        public Category(long? catID = default(long?), string name = default(string), bool? isBookAble = default(bool?), string bookableChkText = default(string))
        {
            this.CatID = catID;
            this.Name = name;
            this.IsBookAble = isBookAble;
            this.BookableChkText = bookableChkText;
        }
        
        /// <summary>
        /// Gets or Sets CatID
        /// </summary>
        [DataMember(Name="catID", EmitDefaultValue=false)]
        public long? CatID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsBookAble
        /// </summary>
        [DataMember(Name="isBookAble", EmitDefaultValue=false)]
        public bool? IsBookAble { get; set; }

        /// <summary>
        /// Gets or Sets BookableChkText
        /// </summary>
        [DataMember(Name="bookableChkText", EmitDefaultValue=false)]
        public string BookableChkText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  CatID: ").Append(CatID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsBookAble: ").Append(IsBookAble).Append("\n");
            sb.Append("  BookableChkText: ").Append(BookableChkText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Category);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="input">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CatID == input.CatID ||
                    (this.CatID != null &&
                    this.CatID.Equals(input.CatID))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsBookAble == input.IsBookAble ||
                    (this.IsBookAble != null &&
                    this.IsBookAble.Equals(input.IsBookAble))
                ) && 
                (
                    this.BookableChkText == input.BookableChkText ||
                    (this.BookableChkText != null &&
                    this.BookableChkText.Equals(input.BookableChkText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CatID != null)
                    hashCode = hashCode * 59 + this.CatID.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IsBookAble != null)
                    hashCode = hashCode * 59 + this.IsBookAble.GetHashCode();
                if (this.BookableChkText != null)
                    hashCode = hashCode * 59 + this.BookableChkText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
