/* 
 * EzOrder Backend
 *
 * API Description for EzOrder Rest-Backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Ordering
    /// </summary>
    [DataContract]
    public partial class Ordering :  IEquatable<Ordering>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ordering" /> class.
        /// </summary>
        /// <param name="orderID">orderID.</param>
        /// <param name="status">status.</param>
        /// <param name="dateOrder">dateOrder.</param>
        /// <param name="dateDelivery">dateDelivery.</param>
        /// <param name="userUserID">userUserID.</param>
        public Ordering(long? orderID = default(long?), long? status = default(long?), DateTime? dateOrder = default(DateTime?), DateTime? dateDelivery = default(DateTime?), long? userUserID = default(long?))
        {
            this.OrderID = orderID;
            this.Status = status;
            this.DateOrder = dateOrder;
            this.DateDelivery = dateDelivery;
            this.UserUserID = userUserID;
        }
        
        /// <summary>
        /// Gets or Sets OrderID
        /// </summary>
        [DataMember(Name="orderID", EmitDefaultValue=false)]
        public long? OrderID { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public long? Status { get; set; }

        /// <summary>
        /// Gets or Sets DateOrder
        /// </summary>
        [DataMember(Name="dateOrder", EmitDefaultValue=false)]
        public DateTime? DateOrder { get; set; }

        /// <summary>
        /// Gets or Sets DateDelivery
        /// </summary>
        [DataMember(Name="dateDelivery", EmitDefaultValue=false)]
        public DateTime? DateDelivery { get; set; }

        /// <summary>
        /// Gets or Sets UserUserID
        /// </summary>
        [DataMember(Name="user_userID", EmitDefaultValue=false)]
        public long? UserUserID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ordering {\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DateOrder: ").Append(DateOrder).Append("\n");
            sb.Append("  DateDelivery: ").Append(DateDelivery).Append("\n");
            sb.Append("  UserUserID: ").Append(UserUserID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ordering);
        }

        /// <summary>
        /// Returns true if Ordering instances are equal
        /// </summary>
        /// <param name="input">Instance of Ordering to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ordering input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderID == input.OrderID ||
                    (this.OrderID != null &&
                    this.OrderID.Equals(input.OrderID))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DateOrder == input.DateOrder ||
                    (this.DateOrder != null &&
                    this.DateOrder.Equals(input.DateOrder))
                ) && 
                (
                    this.DateDelivery == input.DateDelivery ||
                    (this.DateDelivery != null &&
                    this.DateDelivery.Equals(input.DateDelivery))
                ) && 
                (
                    this.UserUserID == input.UserUserID ||
                    (this.UserUserID != null &&
                    this.UserUserID.Equals(input.UserUserID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderID != null)
                    hashCode = hashCode * 59 + this.OrderID.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.DateOrder != null)
                    hashCode = hashCode * 59 + this.DateOrder.GetHashCode();
                if (this.DateDelivery != null)
                    hashCode = hashCode * 59 + this.DateDelivery.GetHashCode();
                if (this.UserUserID != null)
                    hashCode = hashCode * 59 + this.UserUserID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
