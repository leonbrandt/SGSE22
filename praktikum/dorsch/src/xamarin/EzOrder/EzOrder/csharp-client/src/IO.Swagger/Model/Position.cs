/* 
 * EzOrder Backend
 *
 * API Description for EzOrder Rest-Backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Position
    /// </summary>
    [DataContract]
    public partial class Position :  IEquatable<Position>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Position() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        /// <param name="positionID">positionID (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="productProductID">productProductID.</param>
        /// <param name="orderingOrderID">orderingOrderID.</param>
        public Position(long? positionID = default(long?), long? amount = default(long?), long? productProductID = default(long?), long? orderingOrderID = default(long?))
        {
            // to ensure "positionID" is required (not null)
            if (positionID == null)
            {
                throw new InvalidDataException("positionID is a required property for Position and cannot be null");
            }
            else
            {
                this.PositionID = positionID;
            }
            this.Amount = amount;
            this.ProductProductID = productProductID;
            this.OrderingOrderID = orderingOrderID;
        }
        
        /// <summary>
        /// Gets or Sets PositionID
        /// </summary>
        [DataMember(Name="positionID", EmitDefaultValue=false)]
        public long? PositionID { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Gets or Sets ProductProductID
        /// </summary>
        [DataMember(Name="product_productID", EmitDefaultValue=false)]
        public long? ProductProductID { get; set; }

        /// <summary>
        /// Gets or Sets OrderingOrderID
        /// </summary>
        [DataMember(Name="ordering_orderID", EmitDefaultValue=false)]
        public long? OrderingOrderID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  PositionID: ").Append(PositionID).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ProductProductID: ").Append(ProductProductID).Append("\n");
            sb.Append("  OrderingOrderID: ").Append(OrderingOrderID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Position);
        }

        /// <summary>
        /// Returns true if Position instances are equal
        /// </summary>
        /// <param name="input">Instance of Position to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Position input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PositionID == input.PositionID ||
                    (this.PositionID != null &&
                    this.PositionID.Equals(input.PositionID))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ProductProductID == input.ProductProductID ||
                    (this.ProductProductID != null &&
                    this.ProductProductID.Equals(input.ProductProductID))
                ) && 
                (
                    this.OrderingOrderID == input.OrderingOrderID ||
                    (this.OrderingOrderID != null &&
                    this.OrderingOrderID.Equals(input.OrderingOrderID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PositionID != null)
                    hashCode = hashCode * 59 + this.PositionID.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ProductProductID != null)
                    hashCode = hashCode * 59 + this.ProductProductID.GetHashCode();
                if (this.OrderingOrderID != null)
                    hashCode = hashCode * 59 + this.OrderingOrderID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
