/*
 * EzOrder Backend
 * API Description for EzOrder Rest-Backend
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Category', 'model/Ordering', 'model/Position', 'model/Product', 'model/User', 'api/CategoryApi', 'api/OrderingApi', 'api/PositionApi', 'api/ProductApi', 'api/UserApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Category'), require('./model/Ordering'), require('./model/Position'), require('./model/Product'), require('./model/User'), require('./api/CategoryApi'), require('./api/OrderingApi'), require('./api/PositionApi'), require('./api/ProductApi'), require('./api/UserApi'));
  }
}(function(ApiClient, Category, Ordering, Position, Product, User, CategoryApi, OrderingApi, PositionApi, ProductApi, UserApi) {
  'use strict';

  /**
   * API_Description_for_EzOrder_Rest_Backend.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var EzOrderBackend = require('index'); // See note below*.
   * var xxxSvc = new EzOrderBackend.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new EzOrderBackend.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new EzOrderBackend.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new EzOrderBackend.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Category model constructor.
     * @property {module:model/Category}
     */
    Category: Category,
    /**
     * The Ordering model constructor.
     * @property {module:model/Ordering}
     */
    Ordering: Ordering,
    /**
     * The Position model constructor.
     * @property {module:model/Position}
     */
    Position: Position,
    /**
     * The Product model constructor.
     * @property {module:model/Product}
     */
    Product: Product,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The CategoryApi service constructor.
     * @property {module:api/CategoryApi}
     */
    CategoryApi: CategoryApi,
    /**
     * The OrderingApi service constructor.
     * @property {module:api/OrderingApi}
     */
    OrderingApi: OrderingApi,
    /**
     * The PositionApi service constructor.
     * @property {module:api/PositionApi}
     */
    PositionApi: PositionApi,
    /**
     * The ProductApi service constructor.
     * @property {module:api/ProductApi}
     */
    ProductApi: ProductApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi
  };

  return exports;
}));
