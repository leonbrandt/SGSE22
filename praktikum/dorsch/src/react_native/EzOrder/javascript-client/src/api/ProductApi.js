/*
 * EzOrder Backend
 * API Description for EzOrder Rest-Backend
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Product'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Product'));
  } else {
    // Browser globals (root is window)
    if (!root.EzOrderBackend) {
      root.EzOrderBackend = {};
    }
    root.EzOrderBackend.ProductApi = factory(root.EzOrderBackend.ApiClient, root.EzOrderBackend.Product);
  }
}(this, function(ApiClient, Product) {
  'use strict';

  /**
   * Product service.
   * @module api/ProductApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ProductApi. 
   * @alias module:api/ProductApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the add operation.
     * @callback module:api/ProductApi~addCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new product
     * 
     * @param {module:model/Product} body product object that needs to be added to the store
     * @param {module:api/ProductApi~addCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.add = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling add");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/product', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback module:api/ProductApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a product
     * 
     * @param {Number} productID product id to delete
     * @param {module:api/ProductApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProduct = function(productID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling deleteProduct");
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/product/{productID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductById operation.
     * @callback module:api/ProductApi~getProductByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find product by ID
     * Returns a single product
     * @param {Number} productID ID of product to return
     * @param {module:api/ProductApi~getProductByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.getProductById = function(productID, callback) {
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling getProductById");
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/product/{productID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProducts operation.
     * @callback module:api/ProductApi~getProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all products
     * 
     * @param {module:api/ProductApi~getProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Product>}
     */
    this.getProducts = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Product];

      return this.apiClient.callApi(
        '/product', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback module:api/ProductApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing product
     * 
     * @param {module:model/Product} body Product object that needs to be added
     * @param {module:api/ProductApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateProduct = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProduct");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/product', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProductWithForm operation.
     * @callback module:api/ProductApi~updateProductWithFormCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a product with form data
     * 
     * @param {Number} productID ID of product that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Updated name of the product
     * @param {String} opts.status Updated status of the product
     * @param {module:api/ProductApi~updateProductWithFormCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateProductWithForm = function(productID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling updateProductWithForm");
      }


      var pathParams = {
        'productID': productID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'status': opts['status']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/product/{productID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
